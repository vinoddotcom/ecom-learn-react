name: CI/CD Pipeline

on:
  push:
    branches: [main, master, production]
  pull_request:
    branches: [main, master, production]

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

  test:
    name: Test
    needs: [setup]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Run tests
        run: npm test

  typecheck:
    name: TypeCheck
    needs: [setup]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Run type check
        run: npm run typecheck

  build:
    name: Build
    needs: [test, typecheck]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/

  deploy:
    name: Deploy to AWS
    needs: [build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/production'
    permissions:
      id-token: write # Required for OIDC
      contents: read
    
    # Use GitHub environments - dynamically select based on branch
    environment: ${{ github.ref == 'refs/heads/production' && 'production' || 'development' }}
    
    # Environment variables will automatically be loaded from the selected GitHub environment
    # For development environment, set default values as fallbacks
    env:
      # Set S3 bucket name with fallbacks
      S3_BUCKET: ${{ github.ref == 'refs/heads/production' && vars.S3_BUCKET_NAME || 'dev.vinod.digital' }}
      
      # Set CloudFront distribution ID with fallbacks
      CLOUDFRONT_ID: ${{ github.ref == 'refs/heads/production' && vars.CLOUDFRONT_DISTRIBUTION_ID || 'E2MDIU5MXDY2LL' }}
      
      # Set IAM role with fallbacks
      IAM_ROLE: ${{ github.ref == 'refs/heads/production' && vars.IAM_ROLE_ARN || 'arn:aws:iam::587294124303:role/github-actions-manage-s3-cloudfront-dev-vinod-digital' }}
      
      # Dynamically set environment name for logging
      ENV_NAME: ${{ github.ref == 'refs/heads/production' && 'production' || 'development' }}
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.IAM_ROLE }}
          aws-region: ap-south-1

      - name: Deploy to S3 bucket
        run: |
          echo "Deploying to ${{ env.ENV_NAME }} environment"
          echo "S3 Bucket: ${{ env.S3_BUCKET }}"
          aws s3 sync dist/ s3://${{ env.S3_BUCKET }} --delete

      - name: Invalidate CloudFront distribution
        if: env.CLOUDFRONT_ID != ''
        run: |
          echo "Invalidating CloudFront distribution: ${{ env.CLOUDFRONT_ID }}"
          aws cloudfront create-invalidation \
            --distribution-id ${{ env.CLOUDFRONT_ID }} \
            --paths "/*"
